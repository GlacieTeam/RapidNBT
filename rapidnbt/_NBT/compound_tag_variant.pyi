# Copyright Â© 2025 GlacieTeam.All rights reserved.
#
# This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not
# distributed with this file, You can obtain one at http:#mozilla.org/MPL/2.0/.
#
# SPDX-License-Identifier: MPL-2.0

from typing import overload, List, Any
from rapidnbt._NBT.snbt_format import SnbtFormat
from rapidnbt._NBT.tag_type import TagType

class CompoundTagVariant:
    def __eq__(self, arg0: CompoundTagVariant) -> bool: ...
    def __float__(self) -> float: ...
    @overload
    def __getitem__(self, arg0: int) -> ...: ...
    @overload
    def __getitem__(self, arg0: str) -> CompoundTagVariant: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Any) -> None: ...
    def __int__(self) -> int: ...
    def __iter__(self) -> List[CompoundTagVariant]: ...
    def __repr__(self) -> str:
        """Official string representation"""

    @overload
    def __setitem__(self, arg0: str, arg1: Any) -> None: ...
    @overload
    def __setitem__(self, arg0: int, arg1: Any) -> None: ...
    def __str__(self) -> str:
        """String representation (SNBT minimized format)"""

    def append(self, arg0: Any) -> None: ...
    def as_byte(self) -> ...: ...
    def as_byte_array(self) -> ...: ...
    def as_compound(self) -> ...: ...
    def as_double(self) -> ...: ...
    def as_float(self) -> ...: ...
    def as_int(self) -> ...: ...
    def as_int64(self) -> ...: ...
    def as_int_array(self) -> ...: ...
    def as_list(self) -> ...: ...
    def as_long_array(self) -> ...: ...
    def as_short(self) -> ...: ...
    def as_string(self) -> ...: ...
    def contains(self, arg0: str) -> bool: ...
    def copy(self) -> ...: ...
    def get_type(self) -> TagType: ...
    def hold(self, arg0: TagType) -> bool: ...
    def is_array(self) -> bool: ...
    def is_binary(self) -> bool: ...
    def is_boolean(self) -> bool: ...
    def is_null(self) -> bool: ...
    def is_number(self) -> bool: ...
    def is_number_float(self) -> bool: ...
    def is_number_integer(self) -> bool: ...
    def is_object(self) -> bool: ...
    def is_primitive(self) -> bool: ...
    def is_string(self) -> bool: ...
    def is_structured(self) -> bool: ...
    def items(self) -> list: ...
    def merge(self, other: CompoundTagVariant, merge_list: bool = False) -> None: ...
    @overload
    def pop(self, arg0: str) -> bool: ...
    @overload
    def pop(self, arg0: int) -> bool: ...
    def rename(self, arg0: str, arg1: str) -> bool: ...
    def size(self) -> int: ...
    def to_json(self, indent: int = 4) -> str: ...
    def to_snbt(self, snbt_format: SnbtFormat = ..., indent: int = 4) -> str: ...
